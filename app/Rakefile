# frozen_string_literal: true

require 'yaml'

namespace :app do
  namespace :server do
    task :development do
      puts 'Starting development server on port 9292 …'
      ENV['APP_ENVIRONMENT'] ||= 'development'
      sh 'rackup -D -P server.pid -o 0.0.0.0'
      sleep(0.2)
      pid = File.read('server.pid').to_i
      puts "Server running on PID: #{pid}"
    end

    task :production do
      puts 'Starting production server on port 80 …'
      ENV['APP_ENVIRONMENT'] ||= 'production'
      sh 'rackup -D -P server.pid  -o 0.0.0.0 -E PRODUCTION -p 80'
      sleep(0.2)
      pid = File.read('server.pid').to_i
      puts "Server running on PID: #{pid}"
    end

    task :stop do
      puts 'Stopping server …'
      pid = File.read('server.pid').to_i
      sh "kill #{pid}"
    end
  end

  task :start do
    Rake::Task['log:create'].invoke
    Rake::Task['db:create'].invoke
    Rake::Task['env:generate'].invoke
    Rake::Task['app:server:production'].invoke
  end

  task :test do
    puts 'Running tests …'
    ENV['APP_ENVIRONMENT'] ||= 'test'
    sh 'rubocop --require rubocop-rspec'
  end

  require 'rubycritic/rake_task'

  RubyCritic::RakeTask.new do |task|
    task.options = '--mode-ci --format json --no-browser --minimum-score=90'
    task.verbose = true
  end
end

namespace :db do
  database = YAML.load_file('config/database.yml')

  task :create do
    puts 'Creating databases …'
    sh "sqlite3 #{database['development']['database']} < db/schema.sql" unless File.exist?(database['development']['database'])
    sh "sqlite3 #{database['production']['database']} < db/schema.sql" unless File.exist?(database['production']['database'])
    sh "sqlite3 #{database['test']['database']} < db/schema.sql" unless File.exist?(database['test']['database'])
  end

  task :seed do
    if File.exist?(database['development']['database']) &&
       File.exist?(database['test']['database'])
      puts 'Seeding development and testing database …'
      require './db/seeder'
    else
      puts 'Database is missing. Please run db:create to create databases.'
    end
  end

  task :drop do
    puts 'Dropping databases …'
    File.delete((databases['development']['database']).to_s) if File.exist?((databases['development']['database']).to_s)
    File.delete((databases['test']['database']).to_s) if File.exist?((databases['development']['database']).to_s)
    File.delete((databases['production']['database']).to_s) if File.exist?((databases['development']['database']).to_s)
  end

  task :inspect do
    puts 'Inspecting database …'
    sh 'bin/flag_tool.rb -i | less'
  end
end

namespace :env do
  task :generate do
    if File.exist?('.env')
      puts '.env file already exists.'
    else
      puts 'Generating .env file …'
      FileUtils.cp('.env.sample', '.env')
      require 'securerandom'
      random_string = SecureRandom.alphanumeric(64)
      file_content = File.read('.env')
      file_updated = file_content.gsub(/SESSION_KEY=/, 'SESSION_KEY=devops')
      file_updated = file_updated.gsub(/SESSION_RAND=/, "SESSION_RAND=#{random_string}")
      File.open('.env', 'w') { |file| file.puts file_updated }
    end
  end
end

namespace :log do
  log_config = YAML.load_file('config/log.yml')
  task :create do
    puts 'Creating APP logs …'
    sh 'mkdir /var/www/log' unless File.directory?('/var/www/log')
    sh "touch #{log_config['app']['filepath']}" unless File.exist?(log_config['app']['filepath'])
    sh "touch #{log_config['access']['filepath']}" unless File.exist?(log_config['access']['filepath'])
  end
end
